function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

const path = require('path');
const fs = require('fs');
const { rimraf, rimrafSync, readdir } = require('./utils.js');

exports.emp = (() => {
  var _ref = _asyncToGenerator(function* (_path, removeDir = false) {
    const isPathValid = fs.existsSync(_path);
    yield rimraf(_path);

    if (isPathValid && !removeDir) {
      fs.mkdirSync(_path);
    }
  });

  return function (_x) {
    return _ref.apply(this, arguments);
  };
})();

exports.empSync = function (_path, removeDir = false) {
  const isPathValid = fs.existsSync(_path);
  rimrafSync(_path);

  if (isPathValid && !removeDir) {
    fs.mkdirSync(_path);
  }
};

exports.isEmpty = (() => {
  var _ref2 = _asyncToGenerator(function* (_path) {
    const files = yield readdir(_path);

    if (!files.length) {
      return false;
    } else {
      return true;
    }
  });

  return function (_x2) {
    return _ref2.apply(this, arguments);
  };
})();

exports.isEmptySync = function (_path) {
  const items = fs.readdirSync(_path);
  if (!items.length) {
    return false;
  } else {
    return true;
  }
};